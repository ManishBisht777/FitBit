datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String
    accounts      Account[]
    sessions      Session[]

    stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?   @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Gym {
    id         String      @id @default(uuid())
    name       String
    userId     String
    imageUrl   String
    type       String
    billboards Billboard[] @relation("GymToBillboard")
    trainers   Trainer[]   @relation("GymToTrainer")
    plans      Plan[]      @relation("GymToPlan")
    benefits   Benefit[]   @relation("GymToBenefit")
    createdAt  DateTime    @default(now())
    updatedAt  DateTime    @updatedAt
}

model Billboard {
    id        String   @id @default(uuid())
    gymId     String
    gym       Gym      @relation("GymToBillboard", fields: [gymId], references: [id])
    label     String
    imageUrl  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([gymId])
}

model Trainer {
    id       String @id @default(uuid())
    name     String
    role     String
    imageUrl String

    gymId     String
    gym       Gym      @relation("GymToTrainer", fields: [gymId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([gymId])
}

model Plan {
    id          String  @id @default(uuid())
    name        String
    description String
    images      Image[] @relation("PlanToImage")
    price       Decimal

    gymId     String
    gym       Gym      @relation("GymToPlan", fields: [gymId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([gymId])
}

model Benefit {
    id   String @id @default(uuid())
    name String

    gymId     String
    gym       Gym      @relation("GymToBenefit", fields: [gymId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([gymId])
}

model Image {
    id  String @id @default(uuid())
    url String

    planId    String
    plan      Plan     @relation("PlanToImage", fields: [planId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([planId])
}
